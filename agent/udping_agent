#!/usr/local/bin/python3

import requests
import getopt
import sys
import os
import json
import time
import signal
import subprocess

arglist = sys.argv[1:]
options = "vc:h:p:k:?"

controller = ''
verbose = False
polling_interval = 10
keepalive_interval = 10
hostname = ''

children = {}

def checkForOrphans():
    signatures = list(children.keys())
    dosync = False
    ret = 0
    for signature in signatures:
        (pid, exit) = os.waitpid(children[signature]['pid'], os.WNOHANG)
        if pid > 0:
            print ("Detected terminated child %d"%pid)
            del children[signature]
            ret = ret + 1
    return ret


def launchPing(signature, params):
    print ("Launching child %s"%signature)
    pid = os.fork()
    if (pid > 0):
#        print ("Launched child with pid %d"%pid)
#        print (params)
        children[signature] = params
        children[signature]['pid'] = pid
        return

    elif (pid == 0):
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        print ("ping %s | ./ping_otelsender -from_host=%s -to_host=%s -mesh=%s"%(params['peer_ip'], params['local_hostname'], params['peer_ip'], params['mesh_name']))
        subprocess.run ("ping %s | ./ping_otelsender -from_host=%s -to_host=%s -mesh=%s"%(params['peer_ip'], params['local_hostname'], params['peer_ip'], params['mesh_name']), shell=True)
        sys.exit()

def launchUDPingClient(signature, params):
    print ("Launching child %s"%signature)
    pid = os.fork()
    if (pid > 0):
#        print ("Launched child with pid %d"%pid)
#        print (params)
        children[signature] = params
        children[signature]['pid'] = pid
        return

    elif (pid == 0):
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        nextHop = ''
        mac = ''
        for line in subprocess.run(["ping", "-n", "-c", "1", "-t", "1", "-4", params['peer_ip']], capture_output=True).stdout.decode('utf-8').split('\n'):
            print(line)
            fields = line.split()
            if line.find('Hop limit') > -1:
                nextHop = fields[1]
            elif line.find('bytes from') > -1:
                nextHop = fields[3][0:-1]
        if nextHop == '':
            print ("Culd not determine next hop")
            sys.exit()
        else:
            print ("Next hop is %s"%nextHop)
        for line in subprocess.run(["arp", "-n"], capture_output=True).stdout.decode('utf-8').split('\n'):
            fields = line.split()
            if not fields:
                continue
            if (fields[0] == nextHop):
                mac = fields[2]
        if mac == '':
            print ("Culd not determine next hop MAC")
            sys.exit()
        else:
            print ("Next hop MAC is %s"%mac)

        print ("./udping_client -r %s -p 7000 -d 10 -l %s -s 7000 -n 10 -i 30 -m 1400 -a %s"%(params['peer_ip'], params['local_ip'], mac))
        subprocess.run ("./udping_client -r %s -p 7000 -d 10 -l %s -s 7000 -n 10 -i 30 -m 1400 -a %s"%(params['peer_ip'], params['local_ip'], mac), shell=True)
        sys.exit()

def launchUDPingServer(signature, params):
#    print ("Launching child %s"%signature)
    pid = os.fork()
    if (pid > 0):
        print ("Launched child with pid %d"%pid)
        print (params)
        children[signature] = params
        children[signature]['pid'] = pid
        return

    elif (pid == 0):
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        print ("./udping_server -l %s -p 7000 -k 1 | ./udping_otelsender -mesh=%s"%(params['local_ip'], params['mesh_name']))
        subprocess.run ("./udping_server -l %s -p 7000 -k 1 | ./udping_otelsender -mesh=%s"%(params['local_ip'], params['mesh_name']), shell=True)
        sys.exit()

def killChild(signature):
    print ("Killing child %s"%signature)
#    print (children[signature])
    killPidFamily(children[signature]['pid'])
    del children[signature]

def killPidFamily (pid):
    for line in subprocess.run(["ps", "aj"], capture_output=True).stdout.decode('utf-8').split('\n'):
        fields = line.strip().split()
        if not fields:
            continue
        try:
            if (int(fields[0]) == pid):
                killPidFamily(int(fields[1]))
        except:
            pass
    try:
        print ("killing PID %d"%pid)
        os.kill(pid, signal.SIGTERM)
        os.waitpid(pid, 0)
    except:
        pass


def update(controller, hostname, targetList):
    print ("Connecting to %s as %s"%(controller, hostname))
    try:
        r = requests.get("http://%s/q/peers?hostname=%s"%(controller, hostname));
    except:
        print ("Controller down - continuing with existing config")
        return targetList
    if r.status_code == 200:
        return r.json()
    return targetList

def keepalive (controller, hostname):
    try:
        u = requests.get("http://%s/r/keepalive?hostname=%s"%(controller, hostname));
    except:
        print ("Controller down - no keepalive sent")
        pass
    return

def synchronize (targetList):
    targetChildren = {}
    # Add servers
    for params in targetList:
        signature = "%s:%s.%s:%s.%s:%s"%( params['mesh_mechanism'], params['mesh_name'], params['local_hostname'], params['local_ip'], params['peer_hostname'], params['peer_ip'])
        targetChildren[signature] = params
        if (params['mesh_mechanism'] == 'udping'):
            server_signature = "udping_server:%s"%( params['mesh_name'])
            targetChildren[server_signature] = {"mesh_mechanism": "udping", "mesh_name": params['mesh_name'], "local_ip": params['local_ip']}
    for signature, params in targetChildren.items():
#        if (signature in children) and (params['mesh_delay_ms'] != children[signature]['mesh_delay_ms']):
#            killChild(signature)
        if (signature not in children):
            mechanism = params['mesh_mechanism']
            if (mechanism == 'ping'):
                launchPing(signature, params)
            elif (mechanism == 'udping'):
                if (signature.find("udping_server") == 0):
                    launchUDPingServer(signature, params)
                else:
                    launchUDPingClient(signature, params)
            else:
                print ("Unrecognized mechanism %s"%mechanism)
    for signature in list(children.keys()):
        if signature not in targetChildren:
            killChild (signature)

def shutdown(sig, frame):
    print ("Interrupt detected.  Cleaning up ...")
    for signature in list(children.keys()):
        killChild (signature)
    print ("Done cleaning up.  Exiting")
    sys.exit()

def usage():
    print("Usage: udping_controller -c <controller> -h <hostname> [-p polling_interval] [-k keepalive_interval] [-v] [-?]")
    print("   -c: Central controller (host:port)")
    print("   -p: Polling interval in seconds (default: 10)")
    print("   -k: Keepalive interval in seconds (default: 10)")
    print("   -h: Hostname")
    print("   -v: Verbose")
    print("   -?: Print this text")
    sys.exit()

try:
    arguments, values = getopt.getopt(arglist, options)
    for curarg,curval in arguments:
        if curarg == "-v":
            verbose = True
        elif curarg == "-c":
            controller = curval
        elif curarg == "-h":
            hostname = curval
except Exception as err:
    print("Error: %s\n"%str(err))
    usage()

if controller == '':
    usage()
if hostname == '':
    usage()


signal.signal(signal.SIGINT, shutdown)

now = 0

targetList = update (controller, hostname, [])
while (True):
    if not (now % polling_interval):
        targetList = update (controller, hostname, targetList)
        synchronize (targetList)
    if not (now % keepalive_interval):
        keepalive (controller, hostname)
    if checkForOrphans() > 0:
        synchronize (targetList)
    time.sleep(1)
    now = int (time.time())


